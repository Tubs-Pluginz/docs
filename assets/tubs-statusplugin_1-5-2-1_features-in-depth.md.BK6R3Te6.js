import{_ as s,c as t,o as a,ag as i}from"./chunks/framework.BDwTZuFy.js";const h=JSON.parse('{"title":"Features In-Depth ðŸ”Ž","description":"","frontmatter":{},"headers":[],"relativePath":"tubs-statusplugin/1-5-2-1/features-in-depth.md","filePath":"tubs-statusplugin/1-5-2-1/features-in-depth.md"}'),o={name:"tubs-statusplugin/1-5-2-1/features-in-depth.md"};function n(l,e,r,d,c,u){return a(),t("div",null,e[0]||(e[0]=[i(`<h1 id="features-in-depth-ðŸ”Ž" tabindex="-1">Features In-Depth ðŸ”Ž <a class="header-anchor" href="#features-in-depth-ðŸ”Ž" aria-label="Permalink to &quot;Features In-Depth ðŸ”Ž&quot;">â€‹</a></h1><p>This page details some of the core functionalities of Tub&#39;s Status Plugin.</p><h2 id="_1-setting-and-displaying-statuses" tabindex="-1">1. Setting and Displaying Statuses <a class="header-anchor" href="#_1-setting-and-displaying-statuses" aria-label="Permalink to &quot;1. Setting and Displaying Statuses&quot;">â€‹</a></h2><ul><li><strong>Player Command:</strong> Players use <code>/status &lt;your message&gt;</code> to set their status.</li><li><strong>Admin Command:</strong> Admins can use <code>/status &lt;player&gt; &lt;message&gt;</code> to set another player&#39;s status.</li><li><strong>Formatting:</strong><ul><li>Players can use standard Minecraft color codes (e.g., <code>&amp;c</code> for red, <code>&amp;l</code> for bold) in their status messages if they have the corresponding <code>StatusPlugin.formatting.&lt;type&gt;</code> permissions.</li><li>The plugin uses a <code>ColourUtils</code> helper to translate these <code>&amp;</code> codes into actual display colors.</li><li>Spaces can be included by typing <code>&amp;_</code> where a space is desired, as normal spaces might be trimmed by command argument parsing.</li></ul></li><li><strong>Length Limit:</strong> The <code>maxStatusLength</code> in <code>config.yml</code> defines the maximum number of <em>displayable</em> characters. Color codes and PlaceholderAPI placeholders do not count towards this limit.</li><li><strong>Display Locations:</strong><ul><li><strong>Tab List:</strong> If <code>changeTablistNames: true</code>, the status appears before the player&#39;s name in the tab list (e.g., <code>[Status] PlayerName</code>).</li><li><strong>Above Head:</strong> The status is also displayed as part of the player&#39;s display name, visible above their head in-game.</li><li><strong>Chat:</strong> If <code>chatFormatter: true</code>, chat messages are prefixed with the player&#39;s status (e.g., <code>[Status] PlayerName: Hello!</code>).</li></ul></li><li><strong>Formatting Characters:</strong> The <code>openingCharacter</code> and <code>closingCharacter</code> from <code>config.yml</code> (default <code>[</code> and <code>]</code>) are used to wrap the status text.</li></ul><h2 id="_2-group-mode" tabindex="-1">2. Group Mode <a class="header-anchor" href="#_2-group-mode" aria-label="Permalink to &quot;2. Group Mode&quot;">â€‹</a></h2><ul><li><strong>Activation:</strong> Set <code>groupMode: true</code> in <code>config.yml</code>.</li><li><strong>Functionality:</strong> When enabled, players cannot set arbitrary custom statuses with <code>/status &lt;message&gt;</code>. Instead, they must choose from a list of predefined groups using <code>/group &lt;groupname&gt;</code> (or <code>/status group &lt;groupname&gt;</code>).</li><li><strong>Defining Groups:</strong> Status groups are defined in <code>config.yml</code> under the <code>statusGroups</code> section:<div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">statusGroups</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  afk</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    status</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&amp;eAFK&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  pvping</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    status</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&amp;cIn Combat!&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  trusted</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Example group key</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    status</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&amp;aTrusted Member&quot;</span></span></code></pre></div></li><li><strong>Permissions for Groups:</strong> To use a specific group, a player needs the permission <code>StatusPlugin.group.set.&lt;groupKey&gt;</code>. For example, to use the <code>afk</code> group above, they&#39;d need <code>StatusPlugin.group.set.afk</code>. The base permission <code>StatusPlugin.group.set</code> (default: true) allows usage of the <code>/group</code> command itself.</li><li><strong>Admin Override:</strong> Administrators with <code>StatusPlugin.admin.setStatus</code> can still set custom statuses for players even when group mode is active.</li></ul><h2 id="_3-placeholderapi-integration" tabindex="-1">3. PlaceholderAPI Integration <a class="header-anchor" href="#_3-placeholderapi-integration" aria-label="Permalink to &quot;3. PlaceholderAPI Integration&quot;">â€‹</a></h2><ul><li><strong>Detection:</strong> The plugin automatically detects if PlaceholderAPI (PAPI) is installed on the server.</li><li><strong>Registration:</strong> If PAPI is found, Tub&#39;s Status Plugin registers its own expansion: <code>tubsstatusplugin</code>.</li><li><strong>Provided Placeholders:</strong><ul><li><code>%tubsstatusplugin_status%</code>: Displays the status of the player viewing the placeholder.</li><li><code>%tubsstatusplugin_status_&lt;playerName&gt;%</code>: Displays the status of the specified <code>&lt;playerName&gt;</code>. Replace <code>&lt;playerName&gt;</code> with an actual online player&#39;s name. <ul><li>Example: <code>%tubsstatusplugin_status_Notch%</code></li></ul></li></ul></li><li><strong>Usage in Statuses:</strong> If PAPI is present and a player has the <code>StatusPlugin.placeholders</code> permission, they can use <em>other</em> PAPI placeholders <em>within their own status message</em>. These placeholders will be parsed and updated. <ul><li>Example status: <code>/status Playing on %server_name%</code></li></ul></li><li><strong>Automatic Refresh:</strong> The plugin periodically (every 30 seconds by default) updates player display names in the tab list, which helps refresh any PAPI placeholders used within statuses.</li></ul><h2 id="_4-luckperms-integration" tabindex="-1">4. LuckPerms Integration <a class="header-anchor" href="#_4-luckperms-integration" aria-label="Permalink to &quot;4. LuckPerms Integration&quot;">â€‹</a></h2><ul><li><strong>Detection:</strong> The plugin checks if LuckPerms is installed.</li><li><strong>Functionality:</strong> If LuckPerms is present and a player has the <code>StatusPlugin.placeholders</code> permission (this permission seems to gate both PAPI and LP placeholder usage in statuses based on <code>StatusManager.updateDisplayName</code>), the plugin can incorporate the player&#39;s LuckPerms prefix and suffix into their displayed status.</li><li><strong>Placeholders for Statuses:</strong> Players can use these specific strings in their status message: <ul><li><code>%LP_prefix%</code>: Will be replaced by the player&#39;s LuckPerms prefix.</li><li><code>%LP_suffix%</code>: Will be replaced by the player&#39;s LuckPerms suffix.</li></ul></li><li><strong>Example Status:</strong> <code>/status %LP_prefix% &amp;7MyRole &amp;f%LP_suffix%</code></li><li><strong>Note:</strong> The actual prefix/suffix content is managed by LuckPerms. This plugin simply provides a way to display them as part of the status.</li></ul><h2 id="_5-status-persistence" tabindex="-1">5. Status Persistence <a class="header-anchor" href="#_5-status-persistence" aria-label="Permalink to &quot;5. Status Persistence&quot;">â€‹</a></h2><ul><li><strong>Storage:</strong> Player statuses are saved in the <code>plugins/TubsStatusPlugin/statuses.yml</code> file.</li><li><strong>Format:</strong> The file stores player UUIDs mapped to their raw status string (including <code>&amp;</code> color codes).</li><li><strong>Saving:</strong> Statuses are saved whenever a player sets or removes their status.</li><li><strong>Loading:</strong> When the plugin enables (server start/reload), it loads all statuses from this file, ensuring players retain their status across sessions.</li><li><strong>Reloading:</strong> The <code>/status reload</code> command reloads both <code>config.yml</code> and <code>statuses.yml</code>.</li></ul><h2 id="_6-update-checking" tabindex="-1">6. Update Checking <a class="header-anchor" href="#_6-update-checking" aria-label="Permalink to &quot;6. Update Checking&quot;">â€‹</a></h2><ul><li>If <code>checkUpdate: true</code> in <code>config.yml</code>, the plugin contacts the Modrinth API on server startup to check for new versions.</li><li>Notifications are logged to the console.</li><li>For updates marked as <code>CRITICAL</code> or <code>HIGH</code> urgency by the developer on Modrinth, players with the <code>StatusPlugin.admin</code> permission (this seems to be the intended permission from <code>PlayerJoinListener.java</code>, though not explicitly in <code>plugin.yml</code> for this purpose) will receive an in-game notification upon joining.</li></ul>`,14)]))}const g=s(o,[["render",n]]);export{h as __pageData,g as default};
