import{_ as a,c as t,o as i,ag as o}from"./chunks/framework.BDwTZuFy.js";const p=JSON.parse('{"title":"Core Mechanics Explained ðŸ§ ","description":"","frontmatter":{},"headers":[],"relativePath":"bt-graves/1-2-1/core-mechanics.md","filePath":"bt-graves/1-2-1/core-mechanics.md"}'),r={name:"bt-graves/1-2-1/core-mechanics.md"};function l(n,e,s,d,c,g){return i(),t("div",null,e[0]||(e[0]=[o('<h1 id="core-mechanics-explained-ðŸ§ " tabindex="-1">Core Mechanics Explained ðŸ§  <a class="header-anchor" href="#core-mechanics-explained-ðŸ§ " aria-label="Permalink to &quot;Core Mechanics Explained ðŸ§ &quot;">â€‹</a></h1><p>Understanding the inner workings of BT Graves can help you appreciate its features and troubleshoot effectively.</p><h2 id="_1-grave-creation-process-on-player-death" tabindex="-1">1. Grave Creation Process (On Player Death) <a class="header-anchor" href="#_1-grave-creation-process-on-player-death" aria-label="Permalink to &quot;1. Grave Creation Process (On Player Death)&quot;">â€‹</a></h2><p>When a player dies and the <code>keepInventory</code> gamerule is <code>false</code>:</p><ol><li><strong>Inventory &amp; XP Capture:</strong><ul><li>The plugin captures all items from the player&#39;s main inventory, armor slots, and off-hand slot.</li><li>It calculates the experience to be saved based on the <code>expPercentage</code> setting in <code>config.yml</code>. Both full levels and progress to the next level are considered.</li></ul></li><li><strong>Clear Drops:</strong> The player&#39;s default item drops and dropped XP are cleared from the death event to prevent item duplication.</li><li><strong>Find Suitable Location:</strong><ul><li>The plugin attempts to find a suitable empty space (2 blocks high air pocket with a solid or liquid block below) at or near the player&#39;s death location.</li><li>It searches downwards first, then upwards, within a limited range.</li><li>It tries to avoid placing graves inside liquids like lava or water, moving the grave upwards if necessary (respecting world height limits, especially in the Nether).</li></ul></li><li><strong>Grave Entity Spawn:</strong><ul><li>An <strong>invisible armor stand</strong> is spawned at the determined location. This armor stand: <ul><li>Is set to be invulnerable.</li><li>Has gravity disabled.</li><li>Can be <code>small</code> or normal-sized based on the <code>smallArmorStand</code> config setting (affecting hitbox and name tag height).</li><li>Displays a custom name tag: &quot;<code>PlayerName</code>&#39;s Grave - <code>RemainingTime</code>&quot;.</li></ul></li></ul></li><li><strong>Player Head Placement:</strong> A player head block, skinned with the deceased player&#39;s skin, is placed at the armor stand&#39;s feet location.</li><li><strong>Grave Data Storage:</strong><ul><li>A unique <code>graveId</code> is generated.</li><li>All captured items, armor, off-hand item, saved XP (levels and progress), player name, grave location, armor stand UUID, and <code>graveTimeout</code> are stored as a <code>Grave</code> object.</li><li>This data is managed by <code>GraveManager</code> and periodically saved to <code>graves.yml</code> by <code>GravePersistenceManager</code>.</li></ul></li><li><strong>Notification &amp; GUI:</strong><ul><li>The deceased player receives a message informing them that a grave has been created at their death coordinates.</li><li>The grave&#39;s inventory GUI is automatically opened for the deceased player, allowing them to immediately decide whether to restore or drop the items.</li></ul></li></ol><h2 id="_2-grave-interaction-inventory-gui" tabindex="-1">2. Grave Interaction &amp; Inventory GUI <a class="header-anchor" href="#_2-grave-interaction-inventory-gui" aria-label="Permalink to &quot;2. Grave Interaction &amp; Inventory GUI&quot;">â€‹</a></h2><ul><li><strong>Opening a Grave:</strong><ul><li>The <strong>owner</strong> of the grave can open it by right-clicking the invisible armor stand associated with it.</li><li>Administrators with the <code>btgraves.admin.open</code> permission can use the <code>/grave open &lt;graveId&gt;</code> command to open any grave.</li></ul></li><li><strong>GUI Layout (54 slots):</strong><ul><li><strong>Row 1 (Slots 0-3):</strong> Armor (Helmet, Chestplate, Leggings, Boots).</li><li><strong>Row 1 (Slot 8):</strong> Off-hand item.</li><li><strong>Rows 2-4 (Slots 9-35):</strong> Main inventory items (slots 9-35 of player inv).</li><li><strong>Row 5 (Slots 36-44):</strong> Hotbar items (slots 0-8 of player inv).</li><li><strong>Slot 49 (Bottom Middle):</strong> An Experience Bottle item displaying the amount of saved XP levels.</li><li><strong>Slot 45 (Bottom Left):</strong> A Green Stained Glass Pane, labeled &quot;Restore Items&quot;.</li><li><strong>Slot 53 (Bottom Right):</strong> A Red Stained Glass Pane, labeled &quot;Drop Items&quot;.</li></ul></li><li><strong>GUI Actions:</strong><ul><li><strong>Clicking &quot;Restore Items&quot; (Green Pane):</strong><ul><li>Attempts to place all items from the grave GUI directly into the player&#39;s corresponding inventory slots.</li><li>If a slot in the player&#39;s inventory is already occupied, the item from the grave for that slot is dropped at the player&#39;s feet.</li><li>The saved XP (levels and progress) is added to the player.</li><li>The grave (armor stand and player head) is removed from the world, and its data is deleted.</li></ul></li><li><strong>Clicking &quot;Drop Items&quot; (Red Pane):</strong><ul><li>All items from the grave GUI are dropped on the ground at the grave&#39;s location.</li><li>The saved XP is dropped as experience orbs at the grave&#39;s location.</li><li>The grave (armor stand and player head) is removed from the world, and its data is deleted.</li></ul></li><li><strong>Closing the GUI (or clicking other slots):</strong> No action is taken by default; the items remain in the grave. Clicking item slots directly in the GUI is prevented.</li></ul></li></ul><h2 id="_3-grave-expiration-timeout-gravetimeout" tabindex="-1">3. Grave Expiration &amp; Timeout (<code>graveTimeout</code>) <a class="header-anchor" href="#_3-grave-expiration-timeout-gravetimeout" aria-label="Permalink to &quot;3. Grave Expiration &amp; Timeout (`graveTimeout`)&quot;">â€‹</a></h2><ul><li><strong>Timer:</strong> Each grave has an internal timer that starts when it&#39;s created.</li><li><strong><code>graveTimeout</code> Config:</strong> This value (in minutes) determines how long a grave lasts. If set to <code>-1</code>, graves last indefinitely.</li><li><strong>Expiration Logic (<code>GraveTimeoutManager</code>):</strong><ul><li>A repeating task checks active graves.</li><li>If a grave&#39;s <code>activeTime</code> exceeds its <code>maxActiveTime</code> (derived from <code>graveTimeout</code>), it&#39;s marked as <code>expired</code>.</li><li><strong>If an expired grave has a player within a 50-block radius AND the grave&#39;s chunk is loaded:</strong><ul><li>The grave&#39;s contents (items and XP orbs) are dropped at its location.</li><li>The grave (armor stand and player head) is removed.</li></ul></li></ul></li><li><strong>Dynamic Name Tag:</strong> If a player is nearby an active (non-expired) grave, its armor stand name tag is updated to show the remaining time, colored based on urgency (Green -&gt; Gold -&gt; Red).</li></ul><h2 id="_4-grave-protection" tabindex="-1">4. Grave Protection <a class="header-anchor" href="#_4-grave-protection" aria-label="Permalink to &quot;4. Grave Protection&quot;">â€‹</a></h2><p>BTGraves includes listeners to protect graves from common world interactions:</p><ul><li><strong>Block Breaking (<code>BlockBreakListener</code>):</strong> Prevents players from breaking the player head block that is part of a grave.</li><li><strong>Explosions (<code>BlockExplodeListener</code>):</strong> Removes grave player heads from the list of blocks affected by an entity explosion, then schedules a task to replace them if they were destroyed (turned to air), effectively making them explosion-proof.</li><li><strong>Pistons (<code>BlockPistonExtendListener</code>):</strong> Prevents pistons from pushing or pulling the player head block of a grave.</li><li><strong>Liquid Flow (<code>LiquidFlowListener</code>, <code>BlockPlaceListener</code>):</strong><ul><li>Prevents liquids (water, lava) from flowing into the block space occupied by a grave&#39;s player head.</li><li>Prevents players from emptying buckets in a way that would place liquid directly into the grave head&#39;s location (specifically, if the grave head is at <code>y</code> and liquid is placed at <code>y-1</code> targeting the face that would make it flow up).</li></ul></li></ul><h2 id="_5-experience-saving-exppercentage" tabindex="-1">5. Experience Saving (<code>expPercentage</code>) <a class="header-anchor" href="#_5-experience-saving-exppercentage" aria-label="Permalink to &quot;5. Experience Saving (`expPercentage`)&quot;">â€‹</a></h2><ul><li>When a player dies, VPP calculates the total XP they have (based on their current level and progress to the next level).</li><li>The <code>expPercentage</code> value from <code>config.yml</code> (0-100) is applied to this total XP.</li><li>The resulting amount of XP (converted back into levels and fractional progress) is stored in the grave.</li><li>When a player restores items from their grave, this saved XP is added back to their current XP.</li><li>If items are dropped from the grave, the saved XP is spawned as experience orbs.</li></ul><h2 id="_6-data-persistence-gravepersistencemanager" tabindex="-1">6. Data Persistence (<code>GravePersistenceManager</code>) <a class="header-anchor" href="#_6-data-persistence-gravepersistencemanager" aria-label="Permalink to &quot;6. Data Persistence (`GravePersistenceManager`)&quot;">â€‹</a></h2><ul><li>Active grave data (locations, contents, timers, etc.) is stored in memory by <code>GraveManager</code>.</li><li><code>GravePersistenceManager</code> handles saving this data to <code>plugins/BTGraves/graves.yml</code>: <ul><li>When a grave is created or removed.</li><li>Periodically (every 10 seconds by default, as seen in <code>GraveTimeoutManager</code>).</li><li>When the plugin is disabled (server shutdown/reload).</li></ul></li><li>On plugin enable, it loads existing grave data from <code>graves.yml</code>, respawning armor stands and ensuring timers continue.</li><li>Items are serialized to Base64 strings for storage in the YAML file.</li></ul>',16)]))}const m=a(r,[["render",l]]);export{p as __pageData,m as default};
