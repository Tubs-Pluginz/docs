import{_ as a,c as t,o as i,ag as o}from"./chunks/framework.BDwTZuFy.js";const h=JSON.parse('{"title":"Core Mechanics Explained üß†","description":"","frontmatter":{},"headers":[],"relativePath":"combatlogger/1-1/core-mechanics.md","filePath":"combatlogger/1-1/core-mechanics.md"}'),l={name:"combatlogger/1-1/core-mechanics.md"};function r(n,e,s,c,d,g){return i(),t("div",null,e[0]||(e[0]=[o('<h1 id="core-mechanics-explained-üß†" tabindex="-1">Core Mechanics Explained üß† <a class="header-anchor" href="#core-mechanics-explained-üß†" aria-label="Permalink to &quot;Core Mechanics Explained üß†&quot;">‚Äã</a></h1><p>Understanding how BT&#39;s CombatLogger functions internally will help you utilize it effectively on your server.</p><h2 id="_1-combat-tagging-system-üéØ" tabindex="-1">1. Combat Tagging System üéØ <a class="header-anchor" href="#_1-combat-tagging-system-üéØ" aria-label="Permalink to &quot;1. Combat Tagging System üéØ&quot;">‚Äã</a></h2><ul><li><strong>Trigger:</strong> A player is tagged as &quot;in combat&quot; when: <ul><li>They damage another player (who is not an ally).</li><li>They are damaged by another player (who is not an ally).</li><li>This includes damage from projectiles (like arrows) shot by players.</li></ul></li><li><strong>Self-Harm/Environment:</strong> Damaging oneself or taking damage from the environment (e.g., fall damage, mobs, lava) does <strong>not</strong> trigger the combat tag from this plugin.</li><li><strong>Ally Exemption:</strong> If two players are registered as allies via the <code>/cl ally</code> system, hitting each other will <strong>not</strong> trigger the combat tag for either player.</li><li><strong>Timer Initiation/Refresh:</strong><ul><li>When a combat action occurs, both involved (non-allied) players are tagged.</li><li>If a player is already tagged, any new valid combat action will <strong>reset</strong> their combat timer to the full duration specified by <code>combatTimeout</code> in <code>config.yml</code>.</li></ul></li><li><strong>Action Bar Notification:</strong> Players who are tagged in combat will see a message on their action bar indicating they are in combat and showing the remaining seconds on their timer (e.g., &quot;You are in combat for 25s&quot;). When the timer expires, they receive a message like &quot;You are no longer in combat.&quot;</li></ul><h2 id="_2-combat-timer-combattimer-java-‚è±Ô∏è" tabindex="-1">2. Combat Timer (<code>CombatTimer.java</code>) ‚è±Ô∏è <a class="header-anchor" href="#_2-combat-timer-combattimer-java-‚è±Ô∏è" aria-label="Permalink to &quot;2. Combat Timer (`CombatTimer.java`) ‚è±Ô∏è&quot;">‚Äã</a></h2><ul><li>Each player tagged in combat has an individual timer instance.</li><li>The duration of this timer is determined by the <code>combatTimeout</code> value in <code>config.yml</code>.</li><li>The timer counts down every second.</li><li>If a player engages in further combat (deals or receives damage from a non-ally) while their timer is active, the timer is reset to the full <code>combatTimeout</code> duration.</li><li>When the timer reaches zero, the player is no longer considered &quot;in combat&quot; by the plugin, and the action bar message updates accordingly.</li></ul><h2 id="_3-quit-punishment-quitlistener-java-üíÄ" tabindex="-1">3. Quit Punishment (<code>QuitListener.java</code>) üíÄ <a class="header-anchor" href="#_3-quit-punishment-quitlistener-java-üíÄ" aria-label="Permalink to &quot;3. Quit Punishment (`QuitListener.java`) üíÄ&quot;">‚Äã</a></h2><ul><li><strong>Trigger:</strong> A player disconnects (logs out) from the server.</li><li><strong>Check:</strong> The plugin checks if this disconnecting player is currently tagged as &quot;in combat&quot; (i.e., their combat timer is still active).</li><li><strong>Punishment:</strong> If the player <em>is</em> tagged in combat when they disconnect: <ul><li>Their health is set to 0, effectively killing them. This means upon their next login, they will respawn as if they died.</li><li>Their combat tag is removed.</li><li>The plugin internally notes that this player &quot;left in combat.&quot;</li></ul></li><li><strong>Rejoin Message:</strong> When a player who was killed for combat logging rejoins the server, they receive an action bar message: &quot;You were killed because you left while in combat.&quot; (This message is from <code>CombatManager.judgePlayerQuit</code>).</li><li><strong>Death Message:</strong> The death message for a combat logger is customized to indicate they &quot;died because he left during combat&quot; (from <code>DeathListener.java</code>).</li></ul><h2 id="_4-ally-system-allymanager-java-ü§ù" tabindex="-1">4. Ally System (<code>AllyManager.java</code>) ü§ù <a class="header-anchor" href="#_4-ally-system-allymanager-java-ü§ù" aria-label="Permalink to &quot;4. Ally System (`AllyManager.java`) ü§ù&quot;">‚Äã</a></h2><ul><li><strong>Purpose:</strong> Allows players to form alliances to prevent accidental combat tagging during friendly fights or team activities.</li><li><strong>Requests:</strong><ul><li>A player (<code>PlayerA</code>) can send an ally request to another player (<code>PlayerB</code>) using <code>/cl ally add &lt;PlayerB&gt;</code>.</li><li><code>PlayerB</code> receives a clickable message with &quot;[Accept]&quot; and &quot;[Deny]&quot; options.</li><li>Ally requests are timed and expire after 30 seconds if not acted upon.</li></ul></li><li><strong>Accepting/Denying:</strong><ul><li>If <code>PlayerB</code> clicks &quot;[Accept]&quot; (or uses <code>/cl ally accept &lt;PlayerA&gt;</code>), the alliance is formed.</li><li>If <code>PlayerB</code> clicks &quot;[Deny]&quot; (or uses <code>/cl ally deny &lt;PlayerA&gt;</code>), the request is denied.</li></ul></li><li><strong>Mutual Alliance:</strong> Alliances are mutual. If A is allied with B, B is also allied with A.</li><li><strong>Removing Allies:</strong> Players can remove an ally using <code>/cl ally remove &lt;Player&gt;</code>. This removes the alliance for both players.</li><li><strong>Persistence:</strong> Ally relationships are stored in <code>plugins/CombatLogger/allies.yml</code> and are loaded when the server starts or when the plugin is reloaded. This file stores pairs of player UUIDs.</li><li><strong>Impact:</strong> When two players who are allies hit each other, the <code>HitListener</code> checks their ally status and does <strong>not</strong> tag them for combat.</li></ul><h2 id="_5-configuration-data-management" tabindex="-1">5. Configuration &amp; Data Management <a class="header-anchor" href="#_5-configuration-data-management" aria-label="Permalink to &quot;5. Configuration &amp; Data Management&quot;">‚Äã</a></h2><ul><li><strong><code>config.yml</code>:</strong> Stores primary settings like <code>combatTimeout</code> and <code>checkVersion</code>. Managed by <code>ConfigManager.java</code>. Can be reloaded with <code>/cl reload</code>.</li><li><strong><code>allies.yml</code>:</strong> Stores persistent ally relationships (pairs of UUIDs). Managed by <code>AllyManager.java</code>. Reloaded with <code>/cl reload</code>.</li><li><strong>In-Memory Data:</strong><ul><li><code>CombatManager</code> keeps track of currently tagged players and their active <code>CombatTimer</code> instances.</li><li><code>AllyManager</code> caches ally requests in memory.</li></ul></li></ul><p>This system ensures that players are penalized for leaving during active PvP, while also providing flexibility through the ally system and administrative controls.</p>',13)]))}const u=a(l,[["render",r]]);export{h as __pageData,u as default};
