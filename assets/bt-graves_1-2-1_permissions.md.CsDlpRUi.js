import{_ as o,c as i,o as s,ag as t}from"./chunks/framework.BDwTZuFy.js";const u=JSON.parse('{"title":"Permissions Reference ðŸ”‘","description":"","frontmatter":{},"headers":[],"relativePath":"bt-graves/1-2-1/permissions.md","filePath":"bt-graves/1-2-1/permissions.md"}'),a={name:"bt-graves/1-2-1/permissions.md"};function r(n,e,l,d,c,m){return s(),i("div",null,e[0]||(e[0]=[t('<h1 id="permissions-reference-ðŸ”‘" tabindex="-1">Permissions Reference ðŸ”‘ <a class="header-anchor" href="#permissions-reference-ðŸ”‘" aria-label="Permalink to &quot;Permissions Reference ðŸ”‘&quot;">â€‹</a></h1><p>BT Graves uses a few permission nodes to control access to administrative commands and features. You&#39;ll need a Bukkit-compatible permissions plugin (like LuckPerms) to assign these to your players or staff groups.</p><h2 id="command-permissions" tabindex="-1">Command Permissions <a class="header-anchor" href="#command-permissions" aria-label="Permalink to &quot;Command Permissions&quot;">â€‹</a></h2><ul><li><h3 id="btgraves-reload" tabindex="-1"><code>btgraves.reload</code> <a class="header-anchor" href="#btgraves-reload" aria-label="Permalink to &quot;`btgraves.reload`&quot;">â€‹</a></h3><ul><li><strong>Description:</strong> Allows a user to execute the <code>/grave reload</code> command.</li><li><strong>Purpose:</strong> Grants the ability to reload the BTGraves <code>config.yml</code> file without a full server restart.</li><li><strong>Default:</strong> <code>op</code> (Operators have this by default, as per <code>plugin.yml</code>)</li></ul></li><li><h3 id="btgraves-admin-open" tabindex="-1"><code>btgraves.admin.open</code> <a class="header-anchor" href="#btgraves-admin-open" aria-label="Permalink to &quot;`btgraves.admin.open`&quot;">â€‹</a></h3><ul><li><strong>Description:</strong> Allows a user to execute the <code>/grave open &lt;graveId&gt;</code> command.</li><li><strong>Purpose:</strong> Grants the ability for administrators to open and inspect the contents of any player&#39;s grave, provided they know the Grave ID.</li><li><strong>Default:</strong> <code>op</code> (Operators have this by default, as per <code>plugin.yml</code>)</li></ul></li></ul><h2 id="notification-permissions" tabindex="-1">Notification Permissions <a class="header-anchor" href="#notification-permissions" aria-label="Permalink to &quot;Notification Permissions&quot;">â€‹</a></h2><ul><li><h3 id="btgraves-admin" tabindex="-1"><code>btgraves.admin</code> <a class="header-anchor" href="#btgraves-admin" aria-label="Permalink to &quot;`btgraves.admin`&quot;">â€‹</a></h3><ul><li><strong>Description:</strong> While not tied to a specific command in the provided code, the <code>PlayerJoinListener.java</code> checks for this permission (<code>player.hasPermission(&quot;btgraves.admin&quot;)</code>) to notify administrators about critical or high-urgency plugin updates when they join the server (if <code>checkVersion: true</code> is enabled in <code>config.yml</code>).</li><li><strong>Purpose:</strong> Keeps administrators informed about important updates.</li><li><strong>Recommendation:</strong> Grant this to your server administrators or staff group responsible for plugin maintenance.</li><li><strong>Default:</strong> Not explicitly defined in <code>plugin.yml</code> for this specific notification use, so it would depend on your permissions plugin&#39;s default handling or if you grant it explicitly. It&#39;s good practice to assign it.</li></ul></li></ul><div class="tip custom-block"><p class="custom-block-title">Default Permissions</p><p>The <code>default: op</code> in <code>plugin.yml</code> means that server operators will have these permissions by default. For non-operators, you must explicitly grant these permissions using your permissions plugin.</p></div>',7)]))}const h=o(a,[["render",r]]);export{u as __pageData,h as default};
